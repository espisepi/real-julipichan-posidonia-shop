=========== Listado de tareas del proyecto (paginas y componentes) ===============


-  Tecnologias a utilizar:
    -- React con NextJS
    -- axios y react-query para peticiones a las APIS
    -- react-hook-form para manejo de formularios
    -- React context para estados globales como el carrito de compra y autenticacion
    -- Next-auth para el manejo de autenticacion de usuarios

    -- amazon amplify y amazon s3 como backend (antes era mongo cloud para base de datos, cloudinary para subida imagenes y next auth para autenticacion)
    
- Previo:
    -- Crear proyecto con plantilla react-three-next
    ++ yarn create r3f-app next real-julipichan-posidonia-shop -ts
    -- Subir el proyecto a un nuevo repositorio de github desde el VSCode
    -- Añadir los archivos de documentacion del proyecto con las tareas a realizar y realizar commit
    -- Eliminar el <OrbitControls/> del template en Scene.jsx y realizar commit
    -- Cambiar todas las extensiones jsx por tsx y realizar commit
    -- comprobar que funcionan todos los comandos definidos en package.json (yarn start, dev, build...)
    -- Desplegar el proyecto en vercel.

- Pasos a seguir:
    0- Crear pagina /panel y escribir ahí un componente inicial para empezar el desarrollo de los siguientes pasos
    1- Implementar Servicios con API REST (Si se puede, hacer tests para comprobar que los servicios funcionan)
    2- Implementar los hooks necesarios para consumir esos servicios
    3- Implementar los estados globales con Context, Redux, Zustand, etc.
    4- Implementar los hooks necesarios para consumir esos estados globales
    5- Implementar los componentes y paginas sin echar cuenta de que se vean bonitos
    6- Implementar los estilos (que se vea bonita la web)


- Estructura de carpetas del proyecto (en verdad este paso es super importante): (src/)

    - /services (En esta carpeta ponemos lo que antes poniamos en cada carpeta de /api
                    , lo vamos a poner ahora de esta manera para tener controlado en un
                        solo lugar las llamadas a las APIS, por si ocurriese cualquier
                        fallo relacionado con alguna llamada a la API, acceder directamente
                        a esta carpeta para solucionar el end point que falla)

                (Todos los servicios obtendran de la llamada a la api un I...Response y devolveran el tipo de dato I...Data (gracias a los convertidores), ya que estos servicios lo consumiran mis componentes y hooks y solo tratan con los datos de tipo ...Data )
                
                    ========================== ProductService =================================
                    |                                                                         |
    Api da los datos -> IProductResponse ---converter----> IProductData  -> return IProductData --------->   (Esto lo consumen hooks, componentes, pages y lo que me de la gana. Al final los services son funciones javascript normales y corrientes)
                    |                                                                         |
                    ========================== ProductService =================================                                                                                                            

        -- /shop
            --- /product
                ---- Product.Service.ts (axios, mismo codigo que teniamos en )
                (Devolvemos los productos de tipo IProductData o I<cualquier_nombre>Data )
                    { metodos: getProducts, createProduct, updateProduct, deleteProduct... (todos los relacionados con product) }
                ---- .index.ts
        ...
    - /converters
        --/product-converters
            {
                tipos de products (types)
                IProductData: Los datos del producto que manejo en mi aplicacion (en mis estados locales y globales de mis componentes)
                IProductRespones: Los datos del producto
            }
            productResponseToProductData.ts (IProductData )
        ...


    (Estructura final de carpetas jeje)

    - /api
        constants.api.ts (variables constantes que guardan un string con las localizaciones de las apis)
        Ejemplo {
            export const API_ENDPOINT_AMAZON: string = process.env.API_ENDPOINT_AMAZON || "https://amazon.basededatos.api.get.enlace.inventado/";
            export const API_ENDPOINT_AMAZON_GET_PRODUCTS: string = `${API_ENDPOINT_AMAZON}/mycustombd/products`;
            ...
        }
        -- /services
            --- /shop-services
                ---- /product-services
                    ----- ProductService.ts (clase estatica con todas las llamadas relacionadas con Products (Poner export de cada funcion de llamada con axios y despues hacer un "export * as ProductService from '') )
                    ----- /create-product
                    ----- /update-product
        -- /converters

    - /components (para componentes globales)
    - /stores (para manipular estados globales)
        --/auth-store
            ---/context
                ---- Todos los archivos que tienen que ver con el context
            ---/zustand
                ---- Todos los archivos que tienen que ver con zustand
        --/notification-store
            ---/context
            ---/zustand
        --/shop

        
        --- context
        -- zustand

    - /features
        -- /shop
            --- /stores
                ----/cart-store
            --- /products
                ---- /components
                ---- /


    (Estructura final de carpetas jeje x2 )
    
    - carpetas globales de todo tipo que se utilice en toda la aplicacion(api, components, hooks...)
        -- features
            --- shop (anyFeature)
                ----    products (anyCharacteristicOfAnyFeature)
                    ----- carpetas de todo tipo que se relacionen con el concepto de products en nuestra aplicacion (api, components, hooks... )







0.0) Background commun para todas las paginas
    + Poner en _app un nuevo componente <CanvasBackground /> y dejar el Canvas de r3f que estaba por defecto para mostrar elementos 3d por encima del dom
    - (8h) Titulo en 3D como background
    - (8h) tener el background (Ocean con imagen playa atardecer) del proyecto en 3D

0.1) (22h) Layouts
    - (32h) Header (Cabecera de la aplicacion, Navbar menu incluido)
        - (8h) Icono menu hamburguesa y menu desplegable con opciones
        - (8h) Icono carrito y carrito desplegable (like amazon)
    - (2h) Footer
        - (2h) Icono instagram

0.2) About Page:
    - Pagina estatica con el contenido que quiera julia

0.3) Consuming API Application -> Axios y React-Query
    - Creamos el archivo api con la llamada al api endpoint y el hook de react-query
    - Lo utilizamos en nuestro componente

1) Home Page:
    - (Con Julia, 4h) Componente "Descripción de la web"
    - (8h) Componente "listado de productos con fotogrametria en 3D"
    - (1h) Boton de "Ir a la tienda"

2) Shop Page (/shop):
    - (8h) Componente "Filtrar productos por tags y mostrar las tags de filtrado"
        -- (API CONSUMING) GET shop/products?tag=portavelas RETURN List<ProductResponse>
    - (24h) Componente "Mostrar productos 1 a 1 con presentación estilo 3d like Mosha en 3D"
    - (8h) Componente "Listado de productos en card"
        -- (API CONSUMING) GET shop/products RETURN List<ProductResponse>

3) Product Details Page (/shop/product/{slug_product})
    - (4h) Componente  "Modelo 3D orbitcontrols en 3D"
    - (16h) Componente "Carrusel fotos"
    - (8h) Atributos del producto: Precio, Medidas, Descripción, fotos -Array<String> con url- (en carrusel de fotos), modelo 3d -String con url- (en componente Modelo 3D OrbitControls)
        -- (API CONSUMING) GET shop/product/{slug_product} RETURN ProductResponse
    - (4h) Botón añadir al carrito y botón comprar y botón añadir cantidad y quitar cantidad.

4) Cart Page (/shop/cart)
    - (8h) Componente "Listado de productos (entries) del carrito" con opción de: añadir/quitar cantidad, eliminar producto del carrito
        -- Mostrar los atributos del producto: Imagen principal, titulo, medidas, cantidad, precio (solo de 1 cantidad)
    - (8h) Componente "Detalles del carrito"
        -- Mostrar los atributos del carrito: Numero de productos totales, subtotal (precio sin iva like 280€), Impuestos (15% junto con la cantidad de money like 42€), precio total (suma de subtotal + impuestos like 280€ + 42€ = 322€) 
        -- Botón de checkout

5) Checkout Page "Rellenar direccion de envío" (/shop/checkout/address)
    - (8h) Componente "Formulario Direccion de envío"
        -- Atributos del formulario: Nombre, Apellido, Dirección, Dirección 2 (Opcional), Código Postal, Ciudad, País, Teléfono
        -- Botón de Revisar pedido

6) Checkout Page "Revisar Pedido" (/shop/checkout/summary)
    - (24h) Componente "Detalles del pedido"
        -- (8h) Atributos: Los del componente de formulario de direccion de envio, y los del componente de carrito (incluido los productos)
            ----- Listado de productos a la izquierda, Resumen de todo a la derecha (ordenador) / Listado de productos arriba y Resumen de todo abajo (Smartphone)
        -- (16h) Botón de confirmar Pedido (Paypal) (se crea la order)

7) Admin Dashboard Page (/admin/shop/dashboard)
    - (8h) Componente "Atributos del dashboard del admin"
        -- Listado de atributos: Pedidos totales, pedidos pagados, pedidos pendientes, Cantidad de productos, Cantidad de productos sin existencias, Cantidad de productos con existencias, Contador de actualización de la información.

8) Admin Listado de productos Page (/admin/shop/products)
    - Componente "Tabla con listado de productos y paginación y ordenación por campos"
    - Botón para editar el producto (te lleva a la página de edición del producto)
    - Botón para eliminar el producto
    - Botón para crear nuevo producto (te lleva a la página de creación del producto)

9) Admin Creación de nuevo producto Page (/admin/shop/products/new)
    - Componente "Formulario creación de producto"
        ---- Subir imágenes a Cloudinary
    - Botón para guardar y si tiene éxito te lleva a la página del listado de productos
            ---- añadir notificación de aviso de guardado con éxito (libro architecture)

10) Admin Editar producto Page (/admin/shop/products/{slug_product})
    - Componente "Formulario creación de productos pero con los datos rellenos del producto a editar"
    - Botón para guardar y si tiene éxito te lleva a la página del listado de productos
        ---- añadir notificación de aviso de guardado con éxito (libro architecture)

11) Admin Listado de Pedidos Page (/admin/shop/orders)
    - Componente "Tabla con todos los pedidos y sus atributos, con paginación y ordenación por campos"











========= MORRALLA ==============


- Previo:
    -- (1h) Montar proyecto con nextjs
    -- NO HACER (8h) Añadir storybook y tener un hola mundo
        ---- Hacer botones por defecto del proyecto
        ---- Hacer campos de formulario por defecto del proyecto
        ---- Elegir font type para el proyecto
    -- (16h) Añadir threejs y r3f
        ---- (8h) Configurar r3f