

========== PASOS A SEGUIR ==============

1) Crear los componentes y stores de toda la aplicacion y mostrarlos en una pagina para mostrar que funciona todo correctamente.
    1.1) Simular como la aplicacion ecom storefront de Accenture pero mostrando los componentes con sus estilos flama y tener toda la funcionalidad de la pagina de un simple vistazo.
2) Poner los componentes en sus respectivas pages.

========= ERRORES APRENDIDOS ======================
- configurar previamente el proyecto con react-query y axios (lib/api-client.ts, lib/react-query.ts) añadiendo el provider y una peticion con la api (hello world por ejemplo)
- configurar previamente el proyecto con zustand, react context o el manejador de estados que se utilice.
- Los estilos css seran mobile-first y despues para pantallas mas grandes como la del ordenador se usara @media screen
1) Primero poner toda la funcionalidad de las paginas (pages) y poner todos los datos a pelo sin ser bonito visualmente.
    1.1) Ponerlo con datos falsos que devuelve la api del servidor (creo los datos a pelo)
    1.2) Conectar la api del servidor con la base de datos y devolver los datos reales 
2) Despues ponerlo bonito con el cliente al lado diciendo como quiere las cosas que se vean.


======== ESTILOS CSS =================

xs (for phones - screens less than 768px wide)
sm (for tablets - screens equal to or greater than 768px wide)
md (for small laptops - screens equal to or greater than 992px wide)
lg (for laptops and desktops - screens equal to or greater than 1200px wide)

========= PROBLEMAS ENCONTRADOS ===========

1) No se realiza fetch de los datos con el hook de react-query cuando se monta el componente
1 solucion): llamar a la funcion refetch que devuelve useQuery (se llama dentro de useEffect de la page, ej: shop page)

2) No se Muestran los datos de axios porque lo que devuelve es la respuesta de axios y no la data
2 Solucion) Falta incluir un interceptor al atributo de axios que devuelva la respuesta json.

3) Hydration failed because the initial UI does not match what was rendered on the server.
3 Solucion) El error es porque obtengo el carrito por cookie, y eso no funciona en el servidor, por eso me dice que lo que renderiza el servidor es distinto que lo que renderiza el cliente.

4) Error: Component definition is missing display name  react/display-name
4 Solucion) El error es debido a que para utilizar forwardRef hay que añadir el codigo siguiente en el componente en donde se utilice: 
añadir al final del codigo -> Footer.displayName = 'Footer'
Siendo Footer el nombre del componente que este fallando (en este proyecto esta escrito en el Footer para solucionar el error)


5) En el formulario al crear producto no me coge el atributo getValues('images') ya que no le tengo hecho un "...register" con react-hook-form
5 Solucion) Inicializo un nuevo producto con valores por defecto (strings vacios y arrays vacios pero instanciados) y lo inserto de la siguiente manera:
  const { register, handleSubmit, formState:{ errors }, getValues, setValue, watch } = useForm<FormData>({
        defaultValues: product
    })
Siendo producto el objeto instanciado pero vacio. Quedaria entonces asi el codigo:

const product_default = {
    title: "",
    description: "",
    slug: "",
    tags: [],
    price: 0,
    inStock: 0,
    images: [],
    scene: ""
}

export const useProductCreateForm = ({ product = product_default }) => {
    const { 
        register,
        handleSubmit,
        formState: { errors },
        getValues,
        setValue,
        watch,
     } = useForm<ICreateProductFormData>({
        defaultValues: product,  // Aqui antes tenia undefined, por eso no me encontraba el atributo getValues('images')
     });
....





======= Arquitectura =========

1) Mostrar productos
Shop Page -> useProducts (feature/shop/products/api) (React-Query)




- 13/03/23
    - (2h) Realizar documento "1-documentacion_proyecto.txt" poniéndo todas las tareas a realizar.


- 20/03/23
    ==== SHOP PAGE ===============
    - Creamos Shop Page, la carpeta api, components, pages y types para mostrar el listado de productos en la pagina de shopPage. (API endpoint devuelve datos falsos)
        -- 1) Se crea el archivo type con la respuesta del servidor: 
        -- 2) Se crea el archivo api con la llamada a la api para que me devuelva la respuesta del servidor (axios y hook react-query)
            2.1) Si se inserta react-query por primera vez, recordar añadir el QueryClientProvider en app.tsx
        -- 3) Se añade el componente que renderiza (pinta) la respuesta del hook a la page deseada
        -- 4) Se utiliza el hook creado anteriormente en la page deseada y se añade la respuesta del hook como atributos props al componente deseado.
    - NO se ponen bonitos los datos, simplemente se muestran en pantalla para comprobar que funciona todo bien.
    - TODO: Pasar esos datos falsos a datos reales de la base de datos.
    - TODO: Poner los datos bonitos visualmente.
    ==== FIN SHOP PAGE ===============

    === CART PAGE ==================
    - Creamos Cart Page, Zustand con el carrito

    - Zustand VS React Context (https://medium.com/@viraj.vimu/react-context-api-vs-zustand-state-manager-98ca9ac76904)
    - Usamos zustand porque tiene mejor performance, ya que con react context se re-renderiza todos los componentes que se encuentran dentro del provider

    1) Creamos la store del carrito con zustand
    2) Usamos la store en shop page y cart page para pasar a los componentes sus atributos y metodos necesarios para manipular el carrito
    3) Usamos en los componentes los atributos y metodos proporcionados por la store (se lo pasamos mediante parámetros props)

    DEJAMOS DE UTIIZAR ZUSTAND!

    Usamos redux y context: https://www.delasign.com/blog/ts-react-redux-guide-2022/

    Usamos el context del proyecto teslo-shop de udemy xD



- 24/03/23
    - Objetivos:
        -- Subir imagen a cloudinary y mostrarla en el formulario de creacion de producto  